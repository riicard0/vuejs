Aula 1: ===================================================================================================

Intro:

  Vue.js nada mais é do que um Javascript Progressivo (The Progressive JavaScript Framework), pois com 
  esse framework você consegue instalar pequenos componentes dentro do seu sistema antigo tanto quanto 
  num novo sistema. Resumindo, é um framework javascript para construir interfaces.

  Na camada "Model View Controller Arquitetura" o Vue.js se encaixa no "View" pois ele trabalha com a 
  interface, na camada "Model" e "Controller" é relacionada a back-end então envolve outros assuntos.

  No Vue.js:

	- Tudo é componente
	- Tudo é reativo
	- Super rápido


  Componente de arquivo único, exemplo:

	<template>
	  <div>
	    <h1 class="title">
	      {{ title }}
	    </h1>
	  </div>
	</template>

	<script>
	  export default{
	    name: 'MyComponent',

	    data() {
	      return {
		title: 'Hello World',
	      };
	    },

	    methods: {},
	  };
	</script>

	<style>
	  .title {
	    font-size: 20px;
	  }
	</style>

  Ou seja, sendo "Componente de Árquivo Único", a visualização é melhor, pois não é preciso abrir 
  vários arquivos para estilização ou script.

---------------------------------------------------------------------------------------------------

Diretivas:

  Condição e loops (v-if, v-else, v-else-if, v-for)
  Bind (v-bind)
  Two-way data binding (v-model)
  Eventos (v-on)
  Watchers
  ...

---------------------------------------------------------------------------------------------------

Dependências para conseguir assistir o curso:

  - Javascript Intermediário
  - HTML
  - CSS

---------------------------------------------------------------------------------------------------

Ecossistema:

  Vue Dev Tools
  Vue CLI
  Vue Router
  Vuex
  Vue Server Render

---------------------------------------------------------------------------------------------------

Para dar super poderes ao Vue.js podemos utilizar:

  Nuxt.js
  Quasar


Aula 2: ===================================================================================================

Documentação:

	https://vuejs.org/guide/introduction.html

---------------------------------------------------------------------------------------------------

Utilizar Vue.js através do CDN (without build tools):

  Dentro do "index.html" utilize:

	<head>

	  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

	</head>
	<body>

	  <div id="app">{{ message }}</div>

	  <script>
	    const { createApp } = Vue

	    createApp({
	      data() {
	        return {
	          message: 'Hello Vue 3!'
	        }
	      }
	    }).mount('#app')
	  </script>

	</body>

  Aqui já podemos utilizar o Vue.js normalmente.

  Porém se vamos começar um projeto do zero o melhor é utilizar o "Vue CLI" (with build tools), para 
  ver a documentação, acesse:

	https://cli.vuejs.org/guide/

---------------------------------------------------------------------------------------------------

Instalação NPM:

  Para instalar o "npm", dentro do VS Code utilizando o terminal com "Powershell", basta ir em:

	https://cli.vuejs.org/guide/installation.html

  E executar os comandos ordenados:

	npm install -g @vue/cli

  E depois, se precisar, fazer "update", no caso segui o que o próprio terminal indicou:

	npm install -g npm@9.2.0

  E por fim ver a versão em que está:

	npm --version

---------------------------------------------------------------------------------------------------

Política de Segurança do Windows 10 contra Scripts:

  No Windows 10, há uma política de segurança contra scripts que não forem assinados, 
  evitando que rode em sua máquina, para conseguirmos atuar sobre isso, rode dentro do Powershell, 
  lembrando que temos que executar o comando em "modo administrador":

	Set-ExecutionPolicy RemoteSigned -Scope LocalMachine

	y

  Caso queira obter o status antes de executar o comando acima, utilize:

	Get-ExecutionPolicy

  Para mais informações:

	https://pt.stackoverflow.com/questions/220078/o-que-significa-o-erro-execu%C3%A7%C3%A3o-de-scripts-foi-desabilitada-neste-sistema

---------------------------------------------------------------------------------------------------

Começo de tudo:

  Agora, após tudo isso, execute no terminal do VS Code com Powershell, lembrando de ter instalado na sua 
  máquina o "Node":

	vue create app

  O nome "app" quem cria é você. Escolha a opção do "Default ([Vue 3] babel, eslint)", ou seja, o Vue 3. 
  O próprio terminal te indicará os comandos, então:

	cd app

  Sobre os arquivos dentro desta pasta que foi criada pelo "Vue":

    - Não mexa em "node_modules", aqui existem todas as dependências para que nosso projeto possa 
    funcionar em ambiente de desenvolvimento.

    - A pasta "public" será aonde estarão os arquivos públicos, obviamente, onde estarão todos os arquivos 
    estáticos.

    - Na pasta "src" será onde a mágica irá acontecer de verdade. O arquivo "main.js" é o arquivo de 
    entrada dentro do "Vue.js". A pasta "Assets" onde ficarão as imagens, vídeo, css global, etc. Na 
    pasta "components" será onde ficarão nossos componentes.

    - Os outros arquivos que estarão isolados dentro da pasta criada, no caso "app", não precisaremos nos 
    preocupar no momento. Existe somente um que é o "vue.config.js" que será onde ocorrerão algumas 
    configurações especiais caso precise no nosso projeto.

  Através do CDN utilizamos um link dentro do HEAD do HTML para instanciarmos o "Vue.js", aqui rodaremos 
  um comando no terminal, que também foi indicado pelo próprio terminal:

	npm run serve

  Assim, acabamos de ligar um servidor local para desenvolvimento da nossa aplicação.

  No caso, ocorreu um erro no terminal:

	ERROR in Conflict: Multiple assets emit different content to the same filename index.html

  Consegui arrumar tirando o HTML da pasta "public" e colocando dentro da própria pasta "app" (raiz do 
  projeto), depois a aplicação rodou normalmente.

Aula 3: ===================================================================================================

Componentes de arquivo único SFC:

  Single File Component (Componente de Arquivo Único) ou SFC.

  Todos os componentes que criarmos tem que ter a extensão ".vue". Por exemplo, no arquivo que foi criado 
  chamado "app.vue" na primeira camada dentro dele temos o nosso HTML, na segunda camada o Javascript e 
  por último temos a camada do CSS. Exatamente por isso tem esse nome "SFC", pois em um único arquivo 
  temos as três camadas necessárias.

  Dentro da pasta "components", que está dentro de "src", vamos criar nossos "components", como exemplo:

	TheHeader.vue

  Não colocaremos somente "Header.vue" pois já temos um elemento HTML chamado "header" e isso criaria 
  conflitos. Então evite criar nomes de componentes que sejam iguais a nomes de elementos HTML.

---------------------------------------------------------------------------------------------------

Módulos (import/export):

  Módulos Javascript nada mais é do que exportar funcionalidades e importar funcionalidades. Ou seja, 
  por exemplo, eu possuo dois arquivos ".js" ("main.js" e o "superHero.class.js"), digamos, dentro do 
  segundo arquivo vamos deixar diversas funcionalidades lá dentro, como funções, métodos, classes, etc. e 
  dentro do primeiro arquivo "main.js" importaremos somente o necessário no momento para que possamos 
  trabalhar de forma dinâmica e confortável.

  Tipos:

	export default nomeVariavel;

	import nomeVariavel from 'arquivo.js';

  ou

	export function user() {};

	import { user } from 'script.js';

---------------------------------------------------------------------------------------------------

  Para importarmos, temos de ir dentro de "script" e "template" no arquivo "app.vue", lembresse dessa 
  sequência:

	import
	components
	template

  Ou seja, iremos instanciar o arquivo externo primeiro dentro da tag "script" com o "import", depois 
  chamá-lo dentro de "components" e por último chamá-lo dentro da tag "template".

  Na prática:

	<template>

	  <HelloWorld />

	</template>

	<script>

	  import HelloWord from './components/HelloWorld';

	  export default {
	    name: 'App',
	    components: {
	      HelloWorld
	    }
	  }

	</script>

  Assim

  O que estou dizendo, primeiro instanciaremos o "HelloWorld.vue" com "import" dentro da tag "script", 
  depois instanciaremos no "export" (dentro da propriedade "components") e também instanciaremos dentro 
  da tag "template" uma tag de mesmo nome, no caso "HelloWorld". Um complementa o outro, pois faltando 
  algum deles o EsLint é bem chato e ficará acusando erro atrás de erro.

Aula 4: ===================================================================================================

Declarações condicionais (diretiva v-if v-show):

  Tudo que é iniciado no Vue.js com "v-" é chamado de "diretiva".

	v-show
	v-if
	v-else-if
	v-else

  Dentro do arquivo "App.vue" em "export" temos também, além dos campos citados, o campo "data" que é uma 
  função que retorna um objeto.

  Lembrando que temos um outro arquivo que criamos chamado "TheHeader" para que isso possa funcionar.

	<template>
	  <TheHeader v-show="showHeader"  />
	</template>

  Acima temos uma variável dentro de "v-show".

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data() {
	    return {
	      showHeader: false
	    }
	  }
	}

  É através desse objeto que estamos manipulando aquela variável.

  O "v-show" e "v-if" são muito parecidos, porém a diferença é que o "v-show" é basicamente o "display" do 
  "CSS" enquanto o "v-if" continua sendo uma "declaração condicional" se estivessemos em Javascript, por 
  exemplo. 

  Observações:

	- O "v-if" ocupa bem mais memória de processamente do que o "v-show", porém com ele podemos 
	utilizar o "v-else-if" e "v-else".

	- Ficar alerta, pois o "Vue.js" quando se utiliza do "v-show" e utilizamos um "false", como no 
	exemplo citado anteriormente, ele somente adiciona um "display: none" a tag, no código fonte da 
	aplicação, porém a tag ainda continua a aparecer.

	- Caso você queira que essa tag suma por questões de segurança, temos de utilizar o "v-if", pois 
	quando a tag é tida como "false", ou o "v-else-if" ou "v-else", é utilizado aquele "v-if" some 
	completamente do código fonte da aplicação.

  Outro exemplo:

	<template>
	    <div v-show="showName">
	      Nome: {{ firstName }} 
	      <br>
	      Sobrenome: {{ lastName }}
	      <br>
	      Nome completo: {{ firstName + ' ' + lastName }}
	    </div>
	</template>

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      showHeader: false,
	      firstName: 'Jon',
	      lastName: 'Snow',
	      showName: true
	    }
	  }
	}

  Para dizermos ao Vue.js que algo dentro de "<template>" é uma variável, utilizamos a interpolação 
  "{{  }}"

  Com isso também vimos que podemos manipular os elementos da página através de um novo arquivo criado, 
  como o foi o "TheHeader", ou também pelo próprio "App.vue" e dentro de "App.vue" podemos manipular tanto 
  arquivos externos que importamos para cá, como o foi o "TheHeader" colocando "v-show" sobre ele, quanto 
  novos elementos que queremos adicionar diretamente.

  E para exemplificar o "v-if" na prática:

	<template>
	  <div v-if="accessLevel === 'admin'">Administrador</div>
	  <div v-else-if="accessLevel === 'marketing'">Marketing</div>
	  <div v-else>Current User</div>
	</template>

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      accessLevel: ''
	    }
	  }
	}
	</script>

Aula 5: ===================================================================================================

Instruções de loops (diretiva v-for):

  No site:

	https://jsonplaceholder.typicode.com/

  Temos uma ajuda com JSON para "Fake API". Para pegar uma lista de "to do":

	https://jsonplaceholder.typicode.com/todos?_limit=5

  Mudando o final do endereço do site alteramos o tanto de "to do" que queremos.

  Exemplo:

	<template>
	  <div>
	    <div 
	      v-for="(obj, index) in todos"
	      v-bind:key="obj.id"
	      class="todos-item"
	    >
	      {{ index+=1 }} - {{ obj.title }}
	    </div>
	  </div>
	</template>


	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      todos: [
	        {
	          "userId": 1,
	          "id": 1,
	          "title": "delectus aut autem",
	          "completed": false
	        },
	        {
	          "userId": 1,
	          "id": 2,
	          "title": "quis ut nam facilis et officia qui",
	          "completed": false
	        },
	        {
	          "userId": 1,
	          "id": 3,
	          "title": "fugiat veniam minus",
	          "completed": false
	        },
	        {
	          "userId": 1,
	          "id": 4,
	          "title": "et porro tempora",
	          "completed": true
	        },
	        {
	          "userId": 1,
	          "id": 5,
	          "title": "laboriosam mollitia et enim quasi adipisci quia provident illum",
	          "completed": false
	        }
	      ]
	          }
	        }
	      }
	</script>


	<style>
	.todos-item {
	  background: #000;
	  margin: 0 0 5px 0;
	  padding: 3px 6px;
	  color: #fff;
	}
	
	#app {
	  font-family: Avenir, Helvetica, Arial, sans-serif;
	  -webkit-font-smoothing: antialiased;
	  -moz-osx-font-smoothing: grayscale;
	  color: #2c3e50;
	  margin: 60px;
	}
	</style>

  Ou seja, a estrutura "v-for" se dará:

	v-for"*NOME DA INSTRUÇÃO* in *NOME DA VARIÁVEL*"

  Na prática:

	v-for="obj in arr"

  Como no exemplo, também lembro que podemos utilizar mais de uma instrução, ou seja:

	v-for="(obj, index) in arr"

  O "v-bind" iremos estudá-lo mais a frente, mas no caso pegamos os "id" compostos pelo "JSON" 
  utilizando-o dentro de uma "key".

  O "index" passado nada mais é do que o índice dos elementos do "JSON", porém adicionei um número a mais, 
  já que os índices começam no número 0, para lista ficar mais organizada.

Aula 6: ===================================================================================================

Atributos Dinâmicos com data binding (diretiva v-bind):

  A diretiva "v-bind" é um atributo dinâmico, ou seja, todo valor passado para ela terá de ser dinâmico.

  A diretiva "v-bind" é no formato "One-Way data binding", ou seja, temos a possibilidade de alterar o 
  valor somente pelo sistema.

	<template>
	 <div>
	    <img 
	      v-bind:src="imgSrc"
	      v-bind:alt="imgAlt"
	    >
	  </div>
	</template>

	<script>
	import HelloWorld from './components/HelloWorld.vue'
	import TheHeader from './components/TheHeader';

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      imgSrc: 'https://via.placeholder.com/150',
	      imgAlt: 'Foto de Jon Snow'
	          }
	        }
	      }
	</script>

  Imagine, por exemplo, seguindo o exemplo acima, que a imagem vem de uma "API" e o "Alt" venha do banco 
  de dados, ou seja, dinamicamente.

  Existe uma forma de declarar o "v-bind" que acaba por deixar o código mais limpo, que é somente 
  declarando o ":". Olha a dirença do exemplo anterior para agora:

  Exemplo anterior:

	v-bind:alt="imgAlt"

  Novo exemplo:

	:alt="imgAlt"

  O "Vue.js" identifica que estamos chamando o "v-bind" então o declara. Claramente que o valor que irá 
  dentro das aspas é uma variável.

Aula 7: ===================================================================================================

Atributos Class e Style dinâmicos:

  Exemplo:

	<template>
	  <div>
	    <h1 :class="classVar">Curso Vue 3</h1>
	  </div>
	</template>

	<script>
	  export default {
	    name: 'App',
	    components: {
	    },
	    data(){
	      return{
		  classVar: 'title'
		}
	    }
	</script>

	<style>
	  .title{
	    font-size: 20px;
	    color: blue;
	  }
	</style>

  Dessa forma chamamos uma "Class" dinamicamente.

  Lembrando que no valor da "v-bind" podemos utilizar:

	{}
	[]
	['', '', {}]

  Ou seja, objetos, arrays e caso queira arrays com objetos também.

  Outro exemplo:

	<h1 :class="{ 'title': true }">Curso Vue 3</h1>

  Esse "true" que está como valor do "v-bind" pode ser trocado por alguma outra coisa dinâmica.

  Outro exemplo:

	<h1 :class="{ 'title': true, 'title-home': isHome }">Curso Vue 3</h1>

  Outro exemplo:

	  <p :class="['text', 'title', { 'text-home': isHome }]">
	    Lorem ipsum, dolor sit amet consectetur adipisicing elit.
	  </p>

  Ou seja, podemos também passar múltiplos campos dentro do valor do "v-bind".

---------------------------------------------------------------------------------------------------

Agora exemplo com o "style":

  No "template":

	 <p :style="styleClass">
	  Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ratione, quia?
	 </p>

  No "script":

	data(){
	  return{
	    styleClass: { 'color': 'aqua', 'background-color': 'black' }
	  }
	}

Aula 8: ===================================================================================================

Ligação de Dados Bidirecional (diretiva v model):

  A diretiva "v-model", diferente da "v-bind", é no formato "Two-Way data binding", ou seja, temos a 
  possibilidade de alterar o valor tanto pelo sistema (back-end) quanto pelo usuário (front-end).

	<template>
	  <div>
	    <label>Nome:</label>
	    <br>
	    <input v-model="name" type="text">
	    <br>
	    {{ name }}
	  </div>
	</template>

	<script>
	  export default {
	    name: 'App',
	    data() {
	      return {
	        name: 'Jon Snow',
	      }
	    }
	  }
	</script>

  Ele funciona praticamente como o "v-bind" na escrita, porém utiliza do conceito de "Two-Way data 
  binding" como dito anteriormente. Funciona muito bem com formulários:

	<template>
	  <div>
	    <label>Sports:</label>
	    <br>
	    <select v-model="sports">
	      <option value="">Escolha</option>
	      <option value="Futebol">Futebol</option>
	      <option value="Skate">Skate</option>
	      <option value="Tenis">Tenis</option>
	    </select>
	    <br>
	    {{ sports }}
	  </div>
	</template>

	<script>
	  export default {
	    name: 'App',
	    data() {
	      return {
	        name: 'Jon Snow',
	        sports: '',
	      }
	    }
	  }
	</script>

Aula 9: ===================================================================================================

Eventos:

  Lembro que Vue.js é Javascript, então podemos capturar todo evento que quisermos.

  Agora iremos trabalhar com a diretiva "v-on", ela é a que captura o evento desejado. A sintaxe dela é 
  chamar a diretiva, depois o evento desejado, e o valor, que no exemplo abaixo será uma função:

	<button v-on:click="onClick">
	  Enviar
	</button>

  Assim como no "v-bind" que podemos chamar o ":" ao invés do comando inteiro, economizando código e 
  deixando melhor indentado, no "v-on" podemos utilizar o "@" que o "Vue.js" reconhece que estamos 
  chamando essa determinada diretiva.

	<button @click="onClick">
	  Enviar
	</button>

  Lembrando que no "script", as funções sempre ocorrerão dentro de um novo campo, chamado "methods".

---------------------------------------------------------------------------------------------------

Existem os "modificadores de eventos":

	https://br.vuejs.org/v2/guide/events.html#Modificadores-de-Evento

  Bom, existem alguns modificadores de eventos como sufixo para a diretiva "v-on":

  - Esse sufixo modificador de evento interrompe a propagação do evento:

	.stop

  - Previne de carregar o evento:

	.prevent

  - Usar modo de captura ao adicionar o evento:

	.capture

  - Só aciona o evento caso o "event.target" seja o próprio elemento, ou seja, o elemento pai:
  
	.self

  - Só aciona o evento uma vez:

	.once

  - Comunica ao navegador que você não quer prevenir o comportamento padrão do evento. O ".passive" é 
  especialmente útil para otimizar desempenho em dispositivos móveis:

	.passive

  Lembrando que modificadores podem ser encadeados, exemplo:

	<a @click.stop.prevent="doThat"></a>

  A ordem importa ao utilizar modificadores pois o código relevante é gerado na mesma ordem. Desta forma:

	@click.prevent.self 

  prevenirá todos os cliques, enquanto:

	@click.self.prevent 

  prevenirá apenas cliques no próprio elemento.

  Não use ".passive" e ".prevent" juntos, pois ".prevent" será ignorado e seu navegador provavelmente 
  exibirá um aviso. Lembre-se, ".passive" comunica ao navegador que você não quer prevenir o 
  comportamento padrão do evento.

  Existem também as "Key Codes", que são sufixos modificadores de eventos que ocorre quando você fizer 
  determinado ação para com o teclado, exemplo:

	https://br.vuejs.org/v2/guide/events.html#Key-Codes

  - O evento só ocorrerá a partir do momento que "enter" for pressionado:

	.enter

  Último exemplo de modificador de evento:

	<template>
	  <div>

	    <form 
	      action="https://google.com" 
	      @submit.prevent.once="onSubmit"
	    >

	      <input 
	        type="text"
	        @keyup.enter="onKeyUp"
	      >

	      <button type="submit">Enviar</button>

	    </form>

	  </div>
	</template>

	<script>
	  
	  export default {
	    name: 'App',

	    data() {
	      return {
	
	      }
	    },

	    methods: {
	      onSubmit() {
	        console.log('submit');
	      },
	      onKeyUp() {
	        console.log('onKeyUp');
	      }
	    }
	  }

	</script>

Aula 10: ==================================================================================================

Propriedade Computada (computed):

  Propriedade computada é quando você quer montar um valor, baseado em outros valores, ou seja, um valor 
  final vindo de outros valores. Para isso teremos agora um novo campo em "export" chamado "computed", 
  esse campo é o que fará a propriedade computada, exemplo:

	<template>
	  <div>
	    {{ fullName }}
	  </div>
	</template>

	<script>
	export default {
	  name: 'App',
	  components: {
	
	  },
	  data() {
	    return {
	      user: {
	        first_name: 'Jon',
	        last_name: 'Snow'
	      }
	    }
	  },
	  computed: {
	    fullName() {
	      return `${this.user.first_name} ${this.user.last_name}`
	    }
	  },
	  methods: {
	
	  }
	}
	</script>

  Ou seja, dentro de "export" na tag "script", criamos o objeto "user" e adicionamos duas propriedade, no 
  campo "computed" criamos uma função que juntará essas propriedades criadas anteriormente, utilizando de 
  "template string". Para chamar elas utilizamos o "this". Depois para aparecer no nosso código, lá na tag 
  "template", continua sendo a mesma coisa.

  A vantagem disso é que o "Vue.js" irá processar isso de uma maneira bem mais rápida e será recomputado 
  toda vez que alterarmos qualquer valor internamente.

---------------------------------------------------------------------------------------------------

Colocar "Vue.js" numa variável global:

	Vá em "main.js" e na linha com o seguinte código:

		createApp(App).mount('#app')

	Adicione antes:

		window.app = 

	Ficando assim:

		window.app = createApp(App).mount('#app')

	Agora podemos consultar o "Vue.js" do próprio console do navegador pela variável global "app".

---------------------------------------------------------------------------------------------------

Diferença entre "computed" e "methods":

  Caso agora formos no console do navegador e alterarmos o valor de alguma dessas propriedades de "user" 
  que criamos, o valor será alterado e recomputado na hora.

  A diferença do campo "computed" para o campo "methods" é que no campo "methods" o sistema ficará 
  recomputando a função toda hora, gastando assim mais memória, já no campo "computed" já está "cacheado" 
  (cache), ou seja, só irá recomputar novamente quando alguns dos valores forem alterados.

  Por isso é mais recomendado o "computed" quando você tem que fazer o valor final dependente de outros 
  valores.

Aula 11: ==================================================================================================

Observadores (watch):

  O observador é o "watch", esse observador será um novo campo dentro de "export" da tag "script" que 
  trabalhará, claramente, observando tudo que acontece dentro do código avisando assim ao "Vue.js" dentro 
  de determinadas obrigações impostas a ele por você.

	export default {
	  name: '',
	  watch: {
	    ...
	  }
	}

  Ele funciona com função, exemplo:

	watch: {
	  pageCount() {
            this.changePage();
          }
	},
	methods: {
	  changePage() {
            console.log('Ajax changePage');
          }
	}

  Nesse caso criamos uma função qualquer chamada "pageCount" e em "methods" criamos uma outra função no 
  qual será observado.

  Ele funciona com objeto, exemplo:

	data(){
	  return {
	    user: {
	      first_name: '',
	      last_name: ''
	    }
	  }
	},
	watch: {
	  user: {
            handler() {
              console.log('User alterado');
            },
            deep: true
          }
	}

  Aqui no caso, temos o "watch" observando a variável "user" e suas propriedades, através da função 
  "handler" que dirá que quando tal variável se alterar execute tal instrução, ou seja, no nosso caso, 
  quando "user" se alterar execute o "console.log" e o "deep" com valor "true" diz que quando qualquer 
  coisa dentro da variável "user" se alterar, dispare a função, ou seja, uma observação aprodundada, quer 
  dizer que agora ele está observando profundamente, não somente na parte rasa.

  Lembrando que o watch chamado tem que ser o mesmo nome da variável que quiser observar.

Aula 12: ==================================================================================================

Ciclo de Vida (life cicle):

  As fases do ciclo de vida do componente "Vue.js" são divididas em quatro:

    - Criação:
	você prepara o componente. Exemplo: Ajax, inicializar algumas variáveis; Não tem acesso ao 
	template (DOM).

    - Montagem:
	Inicializar uma lib externa, geralmente precisa de acesso ao template (DOM); Tem acesso ao 
	template (DOM).

    - Atualização:
	Geralmente é mais utilizado para "debug"; Update.

    - Desmontagem:
	Remover tudo o que for necessário para liberar memória.

  Para interagirmos com essas fases, temos o que é chamado de "Hooks", sendo eles:

	beforeCreate(){}	- Antes do componente ser criado.

	Created(){}		- Componente foi criado.

	beforeMount(){}		- Antes do componente ser montado.

	Mounted(){}		- Componente foi montado.

	beforeUnmount(){}	- Antes do componente ser desmontado.

	Unmounted(){}		- Componente foi desmontado.

  Todos essas funções serão feitas dentro da tag "script" em "export default".

  Quando você cria, por exemplo, uma variável dentro de "data()", você só poderá ter acesso a ela depois 
  de "created()", antes disso, em "beforeCreate()" não será possível acessá-la.

  Ou seja, você só terá acesso ao "estado do componente" de "created()" pra frente.

  Terá acesso ao DOM de "mounted()" pra frente.

  No "Vue.js" temos um atributo especial chamado "$el" que dá acesso ao DOM, ou seja, o "$el" puxa o 
  elemento raiz do componente.

  É no "beforeUnmount()" que iremos destruir nossas libs, eventos, listeners.

  Também não podemos nos esquecer da "Atualização" que será setada com:

	beforeUpdate(){}

	Updated(){}

  Então neles, tudo que acontecer no componente irá disparar nesses dois, ou seja, imagine que você faça 
  alguma alteração no front dentro de um "input", o "beforeUpdate()" e o "updated()" irão acionar dizendo 
  que houve atualização. Porém esse recurso não será tão utilizado, é mais para "debug".

Aula 13: ==================================================================================================

Components Slots:

  Serve para deixar nosso componente mais flexível ainda, exemplo se eu colocar a tag slot dentro de um 
  componente, exemplo "TheHeader.vue":

	<template>
	  <slot />
	</template>

  Dentro do arquivo "App.vue" ao criar a tag do componente, poderemos modificá-lo conforme quisermos o 
  arquivo "TheHeader.vue" através daquela tag, ou seja, injetar algo que irá manipular o componente, 
  criando agora, ao invés de:

	<TheHeader />

  Agora teremos uma tag completa dentro de "App.vue":

	<TheHeader>
	  ...
	</TheHeader>

  Temos também o "named slot", ou seja, slots nomeados que facilita na manipulação do componente ainda 
  mais. Exemplo:

  Arquivo "TheHeader.vue":

	<template>
	    <!-- Conteúdo "Title" -->
	    <h1 class="title">
	      <slot name="title" />
	    </h1>

	    <!-- Conteúdo "Description" -->
	    <div class="description">
	      <slot name="description" />
	    </div>

	    <!-- Conteúdo "Default" -->
	    <div class="content ">
	      <slot />
	    </div>
	</template>


  Arquivo "App.vue":

	<TheHeader>
	  <template v-slot:title>
	    Title
	  </template>

	  <template v-slot:description>
	    <h2>Description</h2>
	  </template>

	  Default Slot
	</TheHeader>


  "Slot" não nomeados se tornam "default".

  E agora aprendemos mais um diretiva, a diretiva "v-slot" no qual manipula as "named slot".

  Essa injeção de dados, ou manipulação, quando inspecionada na página do navegador, aparece tudo como se 
  estivéssemos escrito o código no próprio "index" e não injetado através de outro arquivo.

  Lembrando que na hora de chamar o "named slot" temos de setar a tag "template" com a diretiva "v-slot".

  Já aprendemos que temos acesso ao elemento através do "mounted()", ou seja:

	export default {
	  mounted(){
	    console.log( this.$el );
	  }
	}

  Ou seja, acesso ao "$el". Lembrando apenas que esse componente é do "template" do componente e não do 
  projeto inteiro, não. Ou seja, você conseguirá manipular somente esse bloco de informação dentro desse 
  componente.

  Agora também temos acesso ao:

	export default {
	  mounted(){
	    console.log( this.$slots );
	  }
	}

  Agora temos acesso ao "$slots" através do "mounted()". E como podemos utilizar isso?

  Na prática, o arquivo "App.vue":

	<TheHeader>
	  // <template v-slot:title>
	  //  Title
	  // </template>

	  <template v-slot:description>
	    <h2>Description</h2>
	  </template>

	  Default Slot
	</TheHeader>

  Ou seja, comentei o "title" então ele está inexistente nesse caso, não aparecerá setado.

  O arquivo "TheHeader.vue":

	<template>
	    <!-- Conteúdo "Title" -->
	    <h1 v-if="$slots.title" class="title">
	      <slot name="title" />
	    </h1>

	    <!-- Conteúdo "Description" -->
	    <div class="description">
	      <slot name="description" />
	    </div>

	    <!-- Conteúdo "Default" -->
	    <div class="content ">
	      <slot />
	    </div>
	</template>

  Ou seja, adicionamos a diretiva "v-if" indicando aquele "$slots", sendo ele um objeto, dizendo que se 
  for "true" poderá executar, caso for "false", como o é agora, sendo que comentamos o código lá no 
  "App.vue", ele não reconhecerá o comando e ocultará no inspecionamento da página (dentro do navegador).

  Apenas aparecerá de forma comentada na inspeção de página:

	<!-- v-if --> == $0

  Obsevação, deixei o "title" comentado só para ilustrar como se eu não tivesse declarado ele no arquivo, 
  ou seja, como se ele não tivesse setado lá.

  Isso tudo sobre "slot" é um recurso muito poderoso no "Vue.js" e iremos utilzar demais nos nossos 
  projetos.


Aula 14: ==================================================================================================

Scoped e Global CSS:

  