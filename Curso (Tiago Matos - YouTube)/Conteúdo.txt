Aula 1: ===================================================================================================

Intro:

  Vue.js nada mais é do que um Javascript Progressivo (The Progressive JavaScript Framework), pois com 
  esse framework você consegue instalar pequenos componentes dentro do seu sistema antigo tanto quanto 
  num novo sistema. Resumindo, é um framework javascript para construir interfaces.

  Na camada "Model View Controller Arquitetura" o Vue.js se encaixa no "View" pois ele trabalha com a 
  interface, na camada "Model" e "Controller" é relacionada a back-end então envolve outros assuntos.

  No Vue.js:

	- Tudo é componente
	- Tudo é reativo
	- Super rápido


  Componente de arquivo único, exemplo:

	<template>
	  <div>
	    <h1 class="title">
	      {{ title }}
	    </h1>
	  </div>
	</template>

	<script>
	  export default{
	    name: 'MyComponent',

	    data() {
	      return {
		title: 'Hello World',
	      };
	    },

	    methods: {},
	  };
	</script>

	<style>
	  .title {
	    font-size: 20px;
	  }
	</style>

  Ou seja, sendo arquivo de componente único, a visualização é melhor, pois não é preciso abrir 
  vários arquivos para estilização ou script.

---------------------------------------------------------------------------------------------------

Diretivas:

  Condição e loops (v-if, v-else, v-else-if, v-for)
  Bind (v-bind)
  Two-way data binding (v-model)
  Eventos (v-on)
  Watchers
  ...

---------------------------------------------------------------------------------------------------

Dependências para conseguir assistir o curso:

  - Javascript Intermediário
  - HTML
  - CSS

---------------------------------------------------------------------------------------------------

Ecossistema:

  Vue Dev Tools
  Vue CLI
  Vue Router
  Vuex
  Vue Server Render

---------------------------------------------------------------------------------------------------

Para dar super poderes ao Vue.js podemos utilizar:

  Nuxt.js
  Quasar


Aula 2: ===================================================================================================

Documentação:

	https://vuejs.org/guide/introduction.html

---------------------------------------------------------------------------------------------------

Utilizar Vue.js através do CDN (without build tools):

  Dentro do "index.html" utilize:

	<head>

	  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

	</head>
	<body>

	  <div id="app">{{ message }}</div>

	  <script>
	    const { createApp } = Vue

	    createApp({
	      data() {
	        return {
	          message: 'Hello Vue 3!'
	        }
	      }
	    }).mount('#app')
	  </script>

	</body>

  Aqui já podemos utilizar o Vue.js normalmente.

  Porém se vamos começar um projeto do zero o melhor é utilizar o "Vue CLI" (with build tools), para 
  ver a documentação, acesse:

	https://cli.vuejs.org/guide/

---------------------------------------------------------------------------------------------------

Instalação NPM:

  Para instalar o "npm", dentro do VS Code utilizando o terminal com "Powershell", basta ir em:

	https://cli.vuejs.org/guide/installation.html

  E executar os comandos ordenados:

	npm install -g @vue/cli

  E depois, se precisar, fazer "update", no caso segui o que o próprio terminal indicou:

	npm install -g npm@9.2.0

  E por fim ver a versão em que está:

	npm --version

---------------------------------------------------------------------------------------------------

Política de Segurança do Windows 10 contra Scripts:

  No Windows 10, há uma política de segurança contra scripts que não forem assinados, 
  evitando que rode em sua máquina, para conseguirmos atuar sobre isso, rode dentro do Powershell, 
  lembrando que temos que executar o comando em "modo administrador":

	Set-ExecutionPolicy RemoteSigned -Scope LocalMachine

	y

  Caso queira obter o status antes de executar o comando acima, utilize:

	Get-ExecutionPolicy

  Para mais informações:

	https://pt.stackoverflow.com/questions/220078/o-que-significa-o-erro-execu%C3%A7%C3%A3o-de-scripts-foi-desabilitada-neste-sistema

---------------------------------------------------------------------------------------------------

Começo de tudo:

  Agora, após tudo isso, execute no terminal do VS Code com Powershell, lembrando de ter instalado na sua 
  máquina o "Node":

	vue create app

  O nome "app" quem cria é você. Escolha a opção do "Default ([Vue 3] babel, eslint)", ou seja, o Vue 3. 
  O próprio terminal te indicará os comandos, então:

	cd app

  Sobre os arquivos dentro desta pasta que foi criada pelo "Vue":

    - Não mexa em "node_modules", aqui existem todas as dependências para que nosso projeto possa 
    funcionar em ambiente de desenvolvimento.

    - A pasta "public" será aonde estarão os arquivos públicos, obviamente, onde estarão todos os arquivos 
    estáticos.

    - Na pasta "src" será onde a mágica irá acontecer de verdade. O arquivo "main.js" é o arquivo de 
    entrada dentro do "Vue.js". A pasta "Assets" onde ficarão as imagens, vídeo, css global, etc. Na 
    pasta "components" será onde ficarão nossos componentes.

    - Os outros arquivos que estarão isolados dentro da pasta criada, no caso "app", não precisaremos nos 
    preocupar no momento. Existe somente um que é o "vue.config.js" que será onde ocorrerão algumas 
    configurações especiais caso precise no nosso projeto.

  Através do CDN utilizamos um link dentro do HEAD do HTML para instanciarmos o "Vue.js", aqui rodaremos 
  um comando no terminal, que também foi indicado pelo próprio terminal:

	npm run serve

  Assim, acabamos de ligar um servidor local para desenvolvimento da nossa aplicação.

  No caso, ocorreu um erro no terminal:

	ERROR in Conflict: Multiple assets emit different content to the same filename index.html

  Consegui arrumar tirando o HTML da pasta "public" e colocando dentro da própria pasta "app" (raiz do 
  projeto), depois a aplicação rodou normalmente.

Aula 3: ===================================================================================================

Componentes de arquivo único SFC:

  Single File Component (Componente de Arquivo Único) ou SFC.

  Todos os componentes que criarmos tem que ter a extensão ".vue". Por exemplo, no arquivo que foi criado 
  chamado "app.vue" na primeira camada dentro dele temos o nosso HTML, na segunda camada o Javascript e 
  por último temos a camada do CSS. Exatamente por isso tem esse nome "SFC", pois em um único arquivo 
  temos as três camadas necessárias.

  Dentro da pasta "components", que está dentro de "src", vamos criar nossos "components", como exemplo:

	TheHeader.vue

  Não colocaremos somente "Header.vue" pois já temos um elemento HTML chamado "header" e isso criaria 
  conflitos. Então evite criar nomes de componentes que sejam iguais a nome de elementos HTML.

---------------------------------------------------------------------------------------------------

Módulos (import/export):

  Módulos Javascript nada mais é do que exportar funcionalidades e importar funcionalidades. Ou seja, 
  por exemplo, eu possuo dois arquivos ".js", "main.js" e o "superHero.class.js" digamos, dentro do 
  segundo arquivo vamos deixar diversas funcionalidades lá dentro, como funções, métodos, classes, etc. e 
  dentro do primeiro arquivo "main.js" importaremos somente o necessário no momento para que possamos 
  trabalhar de forma dinâmica e confortável.

  Tipos:

	export default nomeVariavel;

	import nomeVariavel from 'arquivo.js';

  ou

	export function user() {};

	import { user } from 'arquivo.js';

---------------------------------------------------------------------------------------------------

  Para importarmos, temos de ir dentro de "components" no arquivo "app.vue", lembresse dessa sequência:

	script
	export
	template

  O que estou dizendo, primeiro instanciaremos o "TheHeader.vue" com "import" dentro da tag "script", 
  depois instanciaremos no "export" (dentro da propriedade "components") e também instanciaremos dentro 
  da tag "template" uma tag de mesmo nome, no caso "TheHeader". Um complementa o outro, pois faltando 
  algum deles o EsLint é bem chato e ficará acusando erro atrás de erro.

Aula 4: ===================================================================================================

Declarações condicionais (diretiva v-if v-show):

  Tudo que é iniciado no Vue.js com "v-" é chamado de "diretiva".

	v-show
	v-if
	v-else-if
	v-else

  Dentro do arquivo "App.vue" em "export" temos também, além dos campos citados, o campo "data" que é uma 
  função que retorna um objeto.

  Lembrando que temos um outro arquivo que criamos chamado "TheHeader" para que isso possa funcionar.

	<template>
	  <TheHeader v-show="showHeader"  />
	</template>

  Acima criamos uma variável com "v-show".

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data() {
	    return {
	      showHeader: false
	    }
	  }
	}

  É através desse objeto que estamos manipulando aquela variável.

  O "v-show" e "v-if" são muito parecidos, porém a diferença é que o "v-show" é basicamente o "display" do 
  "CSS" enquanto o "v-if" continua sendo uma "declaração condicional" se estivessemos em Javascript, por 
  exemplo. 

  Observações:

	- O "v-if" ocupa bem mais memória de processamente do que o "v-show", porém com ele podemos 
	utilizar o "v-else-if" e "v-else".

	- Ficar alerta, pois o "Vue.js" quando se utiliza do "v-show" e utilizamos um "false", como no 
	exemplo citado anteriormente, ele somente adiciona um "display: none" a tag, no código fonte da 
	aplicação, porém a tag ainda continua a aparecer.

	- Caso você queira que essa tag suma por questões de segurança, temos de utilizar o "v-if", pois 
	quando a tag é tida como "false", ou o "v-else-if" ou "v-else", é utilizado aquele "v-if" some 
	completamente do código fonte da aplicação.

  Outro exemplo:

	<template>
	    <div v-show="showName">
	      Nome: {{ firstName }} 
	      <br>
	      Sobrenome: {{ lastName }}
	      <br>
	      Nome completo: {{ firstName + ' ' + lastName }}
	    </div>
	</template>

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      showHeader: false,
	      firstName: 'Jon',
	      lastName: 'Snow',
	      showName: true
	    }
	  }
	}

  Para dizermos ao Vue.js que algo dentro de "<template>" é uma variável, utilizamos a interpolação 
  "{{  }}"

  Com isso também vimos que podemos manipular os elementos da página através de um novo arquivo criado, 
  como o foi o "TheHeader", ou também pelo próprio "App.vue" e dentro de "App.vue" podemos manipular tanto 
  arquivos externos que importamos para cá, como o foi o "TheHeader" colocando "v-show" sobre ele, quanto 
  novos elementos que queremos adicionar diretamente.

  E para exemplificar o "v-if" na prática:

	<template>
	  <div v-if="accessLevel === 'admin'">Administrador</div>
	  <div v-else-if="accessLevel === 'marketing'">Marketing</div>
	  <div v-else>Current User</div>
	</template>

	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      accessLevel: ''
	    }
	  }
	}
	</script>

Aula 5: ===================================================================================================

Instruções de loops (diretiva v-for):

  No site:

	https://jsonplaceholder.typicode.com/

  Temos uma ajuda com JSON para "Fake API". Para pegar uma lista de "to do":

	https://jsonplaceholder.typicode.com/todos?_limit=5

  Exemplo:

	<template>
	  <div>
	    <div 
	      v-for="(obj, index) in todos"
	      v-bind:key="obj.id"
	      class="todos-item"
	    >
	      {{ index+=1 }} - {{ obj.title }}
	    </div>
	  </div>
	</template>


	export default {
	  name: 'App',
	  components: {
	    HelloWorld,
	    TheHeader
	  },
	  data(){
	    return {
	      showHeader: false,
	      firstName: 'Jon',
	      lastName: 'Snow',
	      showName: false,
	      showIf: false,
	      accessLevel: '',
	      todos: [
	        {
	          "userId": 1,
	          "id": 1,
	          "title": "delectus aut autem",
	          "completed": false
	        },
	        {
	          "userId": 1,
	          "id": 2,
	          "title": "quis ut nam facilis et officia qui",
	          "completed": false
	        },
	        {
	          "userId": 1,
	          "id": 3,
	          "title": "fugiat veniam minus",
	          "completed": false
	        },
	        {
	          "userId": 1,
	          "id": 4,
	          "title": "et porro tempora",
	          "completed": true
	        },
	        {
	          "userId": 1,
	          "id": 5,
	          "title": "laboriosam mollitia et enim quasi adipisci quia provident illum",
	          "completed": false
	        }
	      ]
	          }
	        }
	      }
	</script>


	<style>
	.todos-item {
	  background: #000;
	  margin: 0 0 5px 0;
	  padding: 3px 6px;
	  color: #fff;
	}
	
	#app {
	  font-family: Avenir, Helvetica, Arial, sans-serif;
	  -webkit-font-smoothing: antialiased;
	  -moz-osx-font-smoothing: grayscale;
	  color: #2c3e50;
	  margin: 60px;
	}
	</style>

  Ou seja, a estrutura "v-for" se dará:

	v-for"*NOME DA INSTRUÇÃO* in *NOME DA VARIÁVEL*"

  Na prática:

	v-for="obj in arr"

  Como no exemplo, também lembro que podemos utilizar mais de uma instrução, ou seja:

	v-for="(obj, index) in arr"

  O "v-bind" iremos estudá-lo mais a frente, mas no caso pegamos os "id" compostos pelo "JSON" 
  utilizando-o dentro de uma "key".

  O "index" passado nada mais é do que o índice dos elementos do "JSON", porém adicionei um número a mais, 
  já que os índices começam no número 0, para lista ficar mais organizada.

Aula 6: ===================================================================================================

Atributos Dinâmicos com data binding (diretiva v-bind):

  